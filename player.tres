[gd_resource type="VisualShader" load_steps=8 format=3 uid="uid://x3n33ng0fpf6"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_eiyef"]
size = Vector2(560, 500)
expression = "ivec2 shaderSize = textureSize(shader, 0);
for (float y = 0.0; y < float(shaderSize.x); y++)
{
	for(float x = 0.0; x < float(shaderSize.x); x++)
	{
		vec2 shaderxy = vec2(y/float(shaderSize.y), x / float(shaderSize.x));
		vec3 shaderColor = texture(shader, shaderxy).xyz;
		if (shaderColor == color)
			result = shaderxy;
	}
}"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_cqest"]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_kcygt"]
parameter_name = "Shader"
texture_filter = 1

[sub_resource type="VisualShaderNodeTexture2DParameter" id="VisualShaderNodeTexture2DParameter_8o43x"]
parameter_name = "Texture"
texture_filter = 1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_fxlcn"]
size = Vector2(340, 200)
expression = "color = texture(imageTexture, shaderUV).xyz;"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_taxm5"]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_k8dku"]
size = Vector2(320, 220)
expression = "color = texture(tex, uv).xyz;"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D Texture : filter_nearest;
uniform sampler2D Shader : filter_nearest;



void fragment() {
// Input:6
	vec2 n_out6p0 = UV;


	vec3 n_out9p0;
// Expression:9
	n_out9p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out9p0 = texture(TEXTURE, n_out6p0).xyz;
	}


	vec2 n_out11p0;
// Expression:11
	n_out11p0 = vec2(0.0, 0.0);
	{
		ivec2 shaderSize = textureSize(Shader, 0);
		for (float y = 0.0; y < float(shaderSize.x); y++)
		{
			for(float x = 0.0; x < float(shaderSize.x); x++)
			{
				vec2 shaderxy = vec2(y/float(shaderSize.y), x / float(shaderSize.x));
				vec3 shaderColor = texture(Shader, shaderxy).xyz;
				if (shaderColor == n_out9p0)
					n_out11p0 = shaderxy;
			}
		}
	}


	vec3 n_out16p0;
// Expression:16
	n_out16p0 = vec3(0.0, 0.0, 0.0);
	{
		n_out16p0 = texture(Texture, n_out11p0).xyz;
	}


// Output:0
	COLOR.rgb = n_out16p0;


}
"
graph_offset = Vector2(-198.805, -225.872)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(1640, -60)
nodes/fragment/6/node = SubResource("VisualShaderNodeInput_taxm5")
nodes/fragment/6/position = Vector2(-380, 200)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_k8dku")
nodes/fragment/9/position = Vector2(-40, 140)
nodes/fragment/9/size = Vector2(320, 220)
nodes/fragment/9/input_ports = "0,8,tex;1,3,uv;"
nodes/fragment/9/output_ports = "0,4,color;"
nodes/fragment/9/expression = "color = texture(tex, uv).xyz;"
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_eiyef")
nodes/fragment/11/position = Vector2(500, 20)
nodes/fragment/11/size = Vector2(560, 500)
nodes/fragment/11/input_ports = "0,8,shader;1,4,color;"
nodes/fragment/11/output_ports = "0,3,result;"
nodes/fragment/11/expression = "ivec2 shaderSize = textureSize(shader, 0);
for (float y = 0.0; y < float(shaderSize.x); y++)
{
	for(float x = 0.0; x < float(shaderSize.x); x++)
	{
		vec2 shaderxy = vec2(y/float(shaderSize.y), x / float(shaderSize.x));
		vec3 shaderColor = texture(shader, shaderxy).xyz;
		if (shaderColor == color)
			result = shaderxy;
	}
}"
nodes/fragment/13/node = SubResource("VisualShaderNodeInput_cqest")
nodes/fragment/13/position = Vector2(-340, 120)
nodes/fragment/14/node = SubResource("VisualShaderNodeTexture2DParameter_kcygt")
nodes/fragment/14/position = Vector2(160, -180)
nodes/fragment/15/node = SubResource("VisualShaderNodeTexture2DParameter_8o43x")
nodes/fragment/15/position = Vector2(760, -300)
nodes/fragment/16/node = SubResource("VisualShaderNodeExpression_fxlcn")
nodes/fragment/16/position = Vector2(1100, -60)
nodes/fragment/16/size = Vector2(340, 200)
nodes/fragment/16/input_ports = "0,8,imageTexture;1,3,shaderUV;"
nodes/fragment/16/output_ports = "0,4,color;"
nodes/fragment/16/expression = "color = texture(imageTexture, shaderUV).xyz;"
nodes/fragment/connections = PackedInt32Array(6, 0, 9, 1, 14, 0, 11, 0, 13, 0, 9, 0, 9, 0, 11, 1, 11, 0, 16, 1, 15, 0, 16, 0, 16, 0, 0, 0)
